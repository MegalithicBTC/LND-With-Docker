# Generated by Django 3.2.7 on 2022-02-23 09:31

from django.db import migrations, models
import django.db.models.deletion
from gui.lnd_deps import lightning_pb2 as ln
from gui.lnd_deps import lightning_pb2_grpc as lnrpc
from gui.lnd_deps import signer_pb2 as lns
from gui.lnd_deps import signer_pb2_grpc as lnsigner
from gui.lnd_deps.lnd_connect import lnd_connect

def update_messages(apps, schedma_editor):
    invoices = apps.get_model('gui', 'invoices')
    try:
        messages = invoices.objects.exclude(message=None)
        if len(messages) > 0:
            stub = lnrpc.LightningStub(lnd_connect())
            signerstub = lnsigner.SignerStub(lnd_connect())
            self_pubkey = stub.GetInfo(ln.GetInfoRequest()).identity_pubkey
            for message in messages:
                records = stub.LookupInvoice(ln.PaymentHash(r_hash=bytes.fromhex(message.r_hash))).htlcs[0].custom_records
                if 34349337 in records and 34349339 in records and 34349343 in records and 34349334 in records:
                    try:
                        valid = signerstub.VerifyMessage(lns.VerifyMessageReq(msg=(records[34349339]+bytes.fromhex(self_pubkey)+records[34349343]+records[34349334]), signature=records[34349337], pubkey=records[34349339])).valid
                    except:
                        print('Unable to validate signature on invoice: ' + message.r_hash)
                        valid = False
                    sender = records[34349339].hex() if valid == True else None
                else:
                    sender = None
                try:
                    alias = stub.GetNodeInfo(ln.NodeInfoRequest(pub_key=sender, include_channels=False)).node.alias if sender != None else None
                except:
                    alias = None
                message.message = records[34349334].decode('utf-8', errors='ignore')[:1000]
                message.sender = sender
                message.sender_alias = alias
                message.save()
    except Exception as e:
        print('Migration step failed:', str(e))

def revert_messages(apps, schedma_editor):
    pass

def update_rebal_channel(apps, schedma_editor):
    payments = apps.get_model('gui', 'payments')
    hops = apps.get_model('gui', 'paymenthops')
    try:
        stub = lnrpc.LightningStub(lnd_connect())
        self_pubkey = stub.GetInfo(ln.GetInfoRequest()).identity_pubkey
        for payment in payments.objects.filter(status=2).iterator():
            last_hop = hops.objects.filter(payment_hash=payment.payment_hash).order_by('-step')[0] if hops.objects.filter(payment_hash=payment.payment_hash).exists() else None
            if last_hop != None and last_hop.node_pubkey == self_pubkey:
                payment.rebal_chan = last_hop.chan_id
                payment.save()
    except Exception as e:
        print('Migration step failed:', str(e))

def revert_rebal_channel(apps, schedma_editor):
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('gui', '0020_auto_20220126_2113'),
    ]

    operations = [
        migrations.CreateModel(
            name='Closures',
            fields=[
                ('chan_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('closing_tx', models.CharField(max_length=64)),
                ('remote_pubkey', models.CharField(max_length=66)),
                ('capacity', models.BigIntegerField()),
                ('close_height', models.IntegerField()),
                ('settled_balance', models.BigIntegerField()),
                ('time_locked_balance', models.BigIntegerField()),
                ('close_type', models.IntegerField()),
                ('open_initiator', models.IntegerField()),
                ('close_initiator', models.IntegerField()),
                ('resolution_count', models.IntegerField()),
            ],
        ),
        migrations.AddField(
            model_name='channels',
            name='htlc_count',
            field=models.IntegerField(default=0),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='channels',
            name='pending_inbound',
            field=models.BigIntegerField(default=0),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='channels',
            name='pending_outbound',
            field=models.BigIntegerField(default=0),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='channels',
            name='private',
            field=models.BooleanField(default=False),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='channels',
            name='total_received',
            field=models.BigIntegerField(default=0),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='channels',
            name='total_sent',
            field=models.BigIntegerField(default=0),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='invoices',
            name='sender',
            field=models.CharField(max_length=66, null=True),
        ),
        migrations.AddField(
            model_name='invoices',
            name='sender_alias',
            field=models.CharField(max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='payments',
            name='rebal_chan',
            field=models.CharField(max_length=20, null=True),
        ),
        migrations.AddField(
            model_name='peers',
            name='alias',
            field=models.CharField(max_length=32, null=True),
        ),
        migrations.AlterField(
            model_name='autopilot',
            name='chan_id',
            field=models.CharField(max_length=20),
        ),
        migrations.AlterField(
            model_name='channels',
            name='chan_id',
            field=models.CharField(max_length=20, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='failedhtlcs',
            name='chan_id_in',
            field=models.CharField(max_length=20),
        ),
        migrations.AlterField(
            model_name='failedhtlcs',
            name='chan_id_out',
            field=models.CharField(max_length=20),
        ),
        migrations.AlterField(
            model_name='forwards',
            name='chan_id_in',
            field=models.CharField(max_length=20),
        ),
        migrations.AlterField(
            model_name='forwards',
            name='chan_id_out',
            field=models.CharField(max_length=20),
        ),
        migrations.AlterField(
            model_name='invoices',
            name='chan_in',
            field=models.CharField(max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='invoices',
            name='message',
            field=models.CharField(max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='paymenthops',
            name='chan_id',
            field=models.CharField(max_length=20),
        ),
        migrations.AlterField(
            model_name='payments',
            name='chan_out',
            field=models.CharField(max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='payments',
            name='message',
            field=models.CharField(max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='pendinghtlcs',
            name='chan_id',
            field=models.CharField(max_length=20),
        ),
        migrations.CreateModel(
            name='Resolutions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resolution_type', models.IntegerField()),
                ('outcome', models.IntegerField()),
                ('outpoint_tx', models.CharField(max_length=64)),
                ('outpoint_index', models.IntegerField()),
                ('amount_sat', models.BigIntegerField()),
                ('sweep_txid', models.CharField(max_length=64)),
                ('chan_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gui.closures')),
            ],
        ),
        migrations.RunPython(update_rebal_channel, revert_rebal_channel),
        migrations.RunPython(update_messages, revert_messages),
    ]
